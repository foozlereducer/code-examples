{
  // http://eslint.org/docs/rules/

  "ecmaFeatures": {
    "arrowFunctions": false,                    // enable arrow functions
    "binaryLiterals": false,                    // enable binary literals
    "blockBindings": false,                     // enable let and const (aka block bindings)
    "defaultParams": false,                     // enable default function parameters
    "Destructuring": false,                     // enable destructuring
    "forOf": false,                             // enable for-of loops
    "generators": false,                        // enable generators
    "modules": false,                           // enable modules and global strict mode
    "objectLiteralComputedProperties": false,   // enable computed object literal property names
    "objectLiteralDuplicateProperties": false,  // enable duplicate object literal properties in strict mode
    "objectLiteralShorthandMethods": false,     // enable object literal shorthand methods
    "objectLiteralShorthandProperties": false,  // enable object literal shorthand properties
    "octalLiterals": false,                     // enable octal literals
    "regexUFlag": false,                        // enable the regular expression u flag
    "regexYFlag": false,                        // enable the regular expression y flag
    "restParams": false,                        // enable the rest parameters
    "spread": false,                            // enable the spread operator for arrays
    "superInFunctions": false,                  // enable super references inside of functions
    "templateStrings": false,                   // enable template strings
    "unicodeCodePointEscapes": false,           // enable code point escapes
    "globalReturn": false,                      // allow return statements in the global scope
    "jsx": false,                               // enable JSX
    "experimentalObjectRestSpread": false,      // enable support for the experimental object rest/spread properties
  },

  "env": {
    "browser": true,                                // browser global variables.
    "node": false,                                  // Node.js global variables and Node.js-specific rules.
    "amd": false,                                   // defines require() and define() as global variables as per the amd spec.
    "mocha": false,                                 // adds all of the Mocha testing global variables.
    "jasmine": false,                               // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    "phantomjs": false,                             // phantomjs global variables.
    "jquery": true,                                 // jquery global variables.
    "prototypejs": false,                           // prototypejs global variables.
    "shelljs": false,                               // shelljs global variables.
  },

  "globals": {
                              // e.g. "angular": true
  },

  "plugins": [
                              // e.g. "react" (must run `npm install eslint-plugin-react` first)
  ],

  "rules": {
    ////////// Possible Errors //////////
    // 0 = off, 1 = warn, 2 = error

    "comma-dangle": 1,                      // disallow trailing commas in object literals, required for IE users in Ottawa
    "no-cond-assign": 2,                    // disallow assignment in conditional expressions
    "no-console": 2,                        // disallow use of console (off by default in the node environment)
    "no-constant-condition": 2,             // disallow use of constant expressions in conditions
    "no-control-regex": 2,                  // disallow control characters in regular expressions
    "no-debugger": 2,                       // disallow use of debugger
    "no-dupe-keys": 2,                      // disallow duplicate keys when creating object literals
    "no-empty": 2,                          // disallow empty statements
    "no-empty-character-class": 2,          // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 2,                      // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2,             // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": [2, "functions" ],   // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 2,                     // disallow unnecessary semicolons
    "no-func-assign": 2,                    // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2,             // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2,                 // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2,           // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2,                 // disallow negation of the left operand of an in expression
    "no-obj-calls": 2,                      // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2,                   // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2,                  // disallow sparse arrays
    "no-unreachable": 2,                    // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2,                         // disallow comparisons with the value NaN
    "valid-jsdoc": 2,                       // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2,                      // Ensure that the results of typeof are compared against a valid string


    ////////// Best Practices //////////

    "accessor-pairs": [ 2, { "getWithoutSet": true } ],                            // Enforces getter/setter pairs in objects
    "block-scoped-var": 2,                                                         // treat var statements as if they were block scoped (off by default)
    "complexity": 0,                                                               // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 2,                                                        // require return statements to either always or never specify values
    "curly": 2,                                                                    // specify curly brace conventions for all control statements
    "default-case": 2,                                                             // require default case in switch statements (off by default)
    "dot-notation": 2,                                                             // encourages use of dot notation whenever possible
    "dot-location": [ 2, "property" ],                                             // encourages new lines before or after dots
    "eqeqeq": [ 2, "smart" ],                                                      // require the use of === and !==
    "guard-for-in": 2,                                                             // make sure for-in loops have an if statement (off by default)
    "no-alert": 0,                                                                 // disallow the use of alert, confirm, and prompt
    "no-caller": 2,                                                                // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2,                                                             // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 2,                                                           // disallow else after a return in an if (off by default)
    "no-empty-label": 2,                                                           // disallow use of labels for anything other then loops and switches
    "no-eq-null": 0,                                                               // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 2,                                                                  // disallow use of eval()
    "no-extend-native": 2,                                                         // disallow adding to native types
    "no-extra-bind": 2,                                                            // disallow unnecessary function binding
    "no-fallthrough": 2,                                                           // disallow fallthrough of case statements
    "no-floating-decimal": 2,                                                      // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 1,                                                          // disallow use of eval()-like methods
    "no-implicit-coercion": 2,                                                     // disallow type conversion with shorter notations
    "no-iterator": 0,                                                              // disallow usage of __iterator__ property
    "no-invalid-this": 2,                                                          // disallow this keywords outside of classes or class like objects
    "no-labels": 2,                                                                // disallow use of labeled statements
    "no-lone-blocks": 2,                                                           // disallow unnecessary nested blocks
    "no-loop-func": 2,                                                             // disallow creation of functions within loops
    "no-multi-spaces": 1,                                                          // we need to evaluate the exceptions to be added for this, warn and then switch to error // disallow use of multiple spaces
    "no-multi-str": 2,                                                             // disallow use of multiline strings
    "no-native-reassign": 2,                                                       // disallow reassignments of native objects
    "no-new": 2,                                                                   // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 2,                                                              // disallow use of new operator for Function object
    "no-new-wrappers": 2,                                                          // disallows creating new instances of String, Number, and Boolean
    "no-octal": 2,                                                                 // disallow use of octal literals
    "no-octal-escape": 2,                                                          // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": 2,                                                        // disallow reassignment of function parameters
    "no-process-env": 0,                                                           // disallow use of process.env (off by default), would only apply to node
    "no-proto": 2,                                                                 // disallow usage of __proto__ property
    "no-redeclare": [ 2, { "builtinGlobals": true } ],                             // disallow declaring the same variable more then once
    "no-return-assign": 2,                                                         // disallow use of assignment in return statement
    "no-script-url": 2,                                                            // disallow use of javascript: urls.
    "no-self-compare": 2,                                                          // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2,                                                             // disallow use of comma operator
    "no-throw-literal": 2,                                                         // restrict what can be thrown as an exception
    "no-unused-expressions": 2,                                                    // disallow usage of expressions in statement position
    "no-useless-call": 2,                                                          // flag use of .call and .apply
    "no-void": 2,                                                                  // disallow use of void operator (off by default)
    "no-warning-comments": 0,                                                      // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 2,                                                                  // disallow use of the with statement
    "radix": 0,                                                                    // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0,                                                              // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 2,                                                                // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": [ 2, "always", { "exceptRange": true, "onlyEquality": false } ],       // require or disallow Yoda conditions


    ////////// Strict Mode //////////

    "global-strict": 0,                      // (deprecated) require or disallow the "use strict" pragma in the global scope (off by default in the node environment)
    "no-extra-strict": 0,                    // (deprecated) disallow unnecessary use of "use strict"; when already in strict mode
    "strict": 0,                             // Needs further testing and review - controls location of Use Strict Directives


    ////////// Variables //////////

    "init-declarations": 0,                                                      // decide if variables must always or never be initialized when declared
    "no-catch-shadow": 2,                                                        // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2,                                                          // disallow deletion of variables
    "no-label-var": 2,                                                           // disallow labels that share a name with a variable
    "no-shadow": [2, {"builtinGlobals": true, "hoist": "all"}],                  // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 2,                                             // disallow shadowing of names such as arguments
    "no-undef": 2,                                                               // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 2,                                                          // disallow use of undefined when initializing variables
    "no-undefined": 2,                                                           // disallow use of undefined variable (off by default)
    "no-unused-vars": [2, {"vars": "local", "args": "after-used"}],              // disallow declaration of variables that are not used in the code
    "no-use-before-define": 2,                                                   // disallow use of variables before they are defined


    ////////// Node.js //////////

    "handle-callback-err": 0,                      // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 0,                        // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 0,                           // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 0,                           // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": 0,                          // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 0,                    // restrict usage of specified node modules (off by default)
    "no-sync": 0,                                  // disallow use of synchronous methods (off by default)


    ////////// Stylistic Issues //////////

    "array-bracket-spacing": [2, "always"],                                                                      // rule aims to maintain consistency around the spacing inside of array brackets
    "block-spacing": [2, "always"],                                                                              // rule is aimed to flag usage of spacing inside of blocks
    "brace-style": [2, "1tbs", { "allowSingleLine": true }],                                                     // enforce one true brace style (off by default)
    "camelcase": 0,                                                                                              // require camel case names
    "comma-spacing": [2, {"before": false, "after": true}],                                                      // enforce spacing before and after comma
    "comma-style": [2, "last"],                                                                                  // enforce one true comma style (off by default)
    "computed-property-spacing": [2, "never"],                                                                   // enforces property spacing
    "consistent-this": 1,                                                                                        // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 2,                                                                                               // enforce newline at the end of file, with no multiple empty lines
    "func-names": 2,                                                                                             // require function expressions to have a name (off by default)
    "func-style": 0,                                                                                             // enforces use of function declarations or expressions (off by default)
    //"id-length": [0, {"min": 0, "max": 0, "properties": "never", "exceptions": []}],                             // troubleshoot and set so no limits applied
    "id-match": [0, "^[a-z]+([A-Z][a-z]+)*$", {"properties": false}],                                            // troubleshoot and make sure options work with this off.
    "indent": [2, "tab"],                                                                                        // specify tab or space width for your code, we and VIP choose tabs
    "jsx-quotes": 0,                                                                                             // specify whether double or single quotes should be used in JSX attributes
    //"key-spacing": [2, {"beforeColon": false, "afterColon": true, "mode": "strict"}],                            // enforces spacing between keys and values in object literal properties
    "lines-around-comment": [2, { "beforeBlockComment": true }],                                                 // set other options to defaults and test
    "linebreak-style": 2,                                                                                        // test out with current code in git/svn
    "max-nested-callbacks": [2, 3],                                                                              // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": 2,                                                                                                // require a capital letter for constructefault)
    "new-parens": 2,                                                                                             // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 0,                                                                                      // require or disallow an empty newline after variable declarations
    "no-array-constructor": 2,                                                                                   // disallow use of the Array constructor
    "no-continue": 2,                                                                                            // disallow use of the continue statement
    "no-inline-comments": 0,                                                                                     // disallow comments inline after code (off by default)
    "no-lonely-if": 2,                                                                                           // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 2,                                                                               // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines":  [2, {max: 2}],                                                                   // disallow multiple empty lines (off by default)
    "no-nested-ternary": 2,                                                                                      // disallow nested ternary expressions (off by default)
    "no-new-object": 2,                                                                                          // disallow use of the Object constructor
    "no-space-before-semi": 0,                                                                                   // disallow space before semicolon
    "no-spaced-func": 2,                                                                                         // disallow space between function identifier and application
    "no-ternary": 0,                                                                                             // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 2,                                                                                     // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0,                                                                                   // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 0,                                                                                    // disallow the use of ternary operators when a simpler alternative exists
    "object-curly-spacing": [2, "always"],                                                                       // require or disallow padding inside curly braces
    "one-var": 0,                                                                                                // allow just one var statement per function (off by default)
    "operator-assignment": 0,                                                                                    // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-linebreak": 0,                                                                                     // enforce operators to be placed before or after line breaks
    "padded-blocks": 0,                                                                                          // enforce padding within blocks (off by default)
    "quote-props": [2, "consistent-as-needed"],                                                                  // require quotes around object literal property names (off by default)
    "quotes": [2, "single"],                                                                                     // specify whether double or single quotes should be used
    "require-jsdoc": 0,                                                                                          // require jsdoc comments, initially off but we will eventually enforce
    "semi-spacing": [2, {"before": false, "after": true}],                                                       // enforce spacing before and after semicolons
// Start here //
    "semi": [2, "always"],                                                                                                   // require or disallow use of semicolons instead of ASI
    "sort-vars": 0,                                                                                              // sort variables within the same declaration block (off by default)
    "space-after-keywords": [2, "always"],                                                                                   // require a space after certain keywords (off by default)
    "space-before-keywords": [2, "always"],                                                                                  // require a space before certain keywords (off by default)
    "space-before-blocks": 2,                                                                                    // require or disallow space before blocks (off by default)
    "space-before-function-paren": [2, "never"],                                                                            // require or disallow a space before function opening parenthesis 
    "space-in-parens": [2, "always"],                                                                                        // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 2,                                                                                        // require spaces around operators
    "space-return-throw-case": 2,                                                                                // require a space after return, throw, and case
    "space-unary-ops": 2,                                                                                        // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": [2, "always"],                                                                                         // require or disallow a space immediately following the // in a line comment (off by default)
    "wrap-regex": 2,                                                                                             // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////

    "allow-parens": 0,                              // require parens in arrow function arguments
    "arrow-spacing": 0,                             // require space before/after arrow function's arrow
    "constructor-super": 0,                         // verify calls of super() in contructors
    "generator-star-spacing": 0,                    // enforce spacing around the * in generator functions
    "no-class-assign": 0,                           // disallow modifying variables of class declarations
    "no-const-assign": 0,                           // disallow modifying variables that are declared using const
    "no-dupe-class-members": 0,                     // disallow duplicate name in class members
    "no-this-before-super": 0,                      // disallow use of this/super before calling super() in constructors.
    "no-var": 0,                                    // require let or const instead of var (off by default)
    "object-shorthand": 0,                          // require method and property shorthand syntax for object literals
    "prefer-arrow-callback": 0,                     // suggest using arrow functions as callbacks
    "prefer-const": 0,                              // suggest using const declaration for variables that are never modified after declared
    "prefer-spread": 0,                             // suggest using the spread operator instead of .apply().
    "prefer-reflect": 0,                            // suggest using Reflect methods where applicable
    "prefer-template": 0,                           // suggest using template literals instead of strings concatenation
    "require-yield": 0,                             // disallow generator functions that do not have yield



    ////////// Legacy //////////

    "max-depth": 0,                          // specify the maximum depth that blocks can be nested (off by default)
    "max-len": 0,                            // specify the maximum length of a line in your program (off by default)
    "max-params": 0,                         // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": 0,                     // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": 0,                         // disallow use of bitwise operators (off by default)
    "no-plusplus": 0                         // disallow use of unary operators, ++ and -- (off by default)
  }
}
